Grammar:

prog -> program id opt_stmts

stmt -> set id expr
        | if (expresion) opt stmts
        | ifelse (expresion) opt_stmts opt_stmts
        | while (expresion) opt_stmts

opt stmts -> {} | {stmt lst} | instr

stmt_lst -> instr | instr stmt_lst

instr -> ; |  stmt;

expr -> term expr_
expr_ -> + term expr_ | - term expr_ | epsilon

term -> term * factor                       // Left recursion
        | term / factor
        | factor

factor -> (expr)
        | id
        | num

expresion -> expr < expr
        | expr > expr
        | expr = expr